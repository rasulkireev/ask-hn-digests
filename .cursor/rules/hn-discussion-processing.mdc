---
description: Making adjustments to `HNDiscussionSummary` model and tasks that affect it.
globs:
alwaysApply: false
---
# Hacker News Discussion Processing Overview

This document outlines the key models and asynchronous tasks involved in processing Hacker News discussions, summarizing them, and generating associated content like tags and Twitter threads.

## Core Model: HNDiscussionSummary

The central model for storing processed discussion data is `HNDiscussionSummary`, located in [`core/models.py`](mdc:core/models.py).

Key fields include:
- `discussion_id`: The unique Hacker News discussion ID.
- `discussion_title`: The original title of the discussion.
- `summary_tags`: A comma-separated string of tags generated by AI (Gemini) to categorize the discussion summary itself. This field was recently added.
- `comment_ids`: A JSON list of comment IDs from the discussion.
- `short_summary`: A concise summary suitable for newsletters.
- `long_summary`: A more detailed summary intended for blog posts.
- `slug`, `title`, `description`, `tags`: Fields related to the blog post generated from the summary. Note that `tags` here refers to blog post tags, distinct from `summary_tags`.
- `twitter_thread`: A pre-generated Twitter thread based on the discussion.

## Asynchronous Task Orchestration

The main task for processing a discussion is `summarize_hn_discussion` in [`core/tasks.py`](mdc:core/tasks.py). This function:
1. Fetches discussion data and comments from the Hacker News API.
2. Uses the Gemini API to generate:
    - `short_summary`
    - `long_summary`
    - `title` (for blog post)
    - `slug` (for blog post)
    - `description` (for blog post meta tag)
    - `tags` (for blog post)
3. Creates an `HNDiscussionSummary` object with the retrieved and generated data.
4. Schedules two subsequent asynchronous tasks using `django_q.tasks.async_task`:
    - `core.tasks.generate_twitter_thread` (group: "Generate Twitter Thread")
    - `core.tasks.generate_summary_tags` (group: "Generate Summary Tags")

## Content Generation Tasks

### Twitter Thread Generation
- **Task**: `generate_twitter_thread` in [`core/tasks.py`](mdc:core/tasks.py)
- **Input**: An `HNDiscussionSummary` object.
- **Action**: Uses the Gemini API to generate a Twitter thread based on the summary's title, description, and long summary.
- **Output**: Updates the `twitter_thread` field of the `HNDiscussionSummary` object.

### Summary Tag Generation
- **Task**: `generate_summary_tags` in [`core/tasks.py`](mdc:core/tasks.py)
- **Input**: An `HNDiscussionSummary` object.
- **Action**: Uses the Gemini API to generate approximately 10 relevant tags based on the discussion's title, short summary, and an excerpt of the long summary.
- **Output**: Updates the `summary_tags` field of the `HNDiscussionSummary` object with a comma-separated string of tags.
